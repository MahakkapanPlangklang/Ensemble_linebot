from flask import Flask, request, jsonify
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import requests
import os

# ‚úÖ 1Ô∏è‚É£ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏µ‡∏ü‡∏≠‡∏•‡∏ï‡πå)
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("/ycMqmThIG73IIedsA38axnF1ZigpCZPXP9MK2Ek86vWWxLGApcM5x5N7q6pE8cPxlJgry9wkW7NgB3ENgb2yVuaDnlVtHB3CmupkHQt/6LIAPF2z5SRkrAKuAA9U4mgDwKYULuHZsoa4si70zQjVQdB04t89/1O/w1cDnyilFU=")
LINE_CHANNEL_SECRET = os.getenv("9c41d2a0275ecd4e398efd7d2e4548f7")

print(f"üîç LINE_CHANNEL_ACCESS_TOKEN: {LINE_CHANNEL_ACCESS_TOKEN}")
print(f"üîç LINE_CHANNEL_SECRET: {LINE_CHANNEL_SECRET}")

if not LINE_CHANNEL_ACCESS_TOKEN:
    raise ValueError("‚ùå ERROR: LINE_CHANNEL_ACCESS_TOKEN ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Environment Variables")

if not LINE_CHANNEL_SECRET:
    raise ValueError("‚ùå ERROR: LINE_CHANNEL_SECRET ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏ô Environment Variables")

# ‚úÖ 3Ô∏è‚É£ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ API ‡∏Ç‡∏≠‡∏á LINE
line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ‚úÖ 4Ô∏è‚É£ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á API ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà Deploy ‡∏ö‡∏ô Render (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏à‡∏£‡∏¥‡∏á)
PREDICTION_API_URL = "https://ensemble-t564.onrender.com/predict"

app = Flask(__name__)

@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Line Chatbot for Penguin Prediction is Running."

@app.route("/callback", methods=["POST"])
def callback():
    """ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE Webhook """
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        return "Invalid signature", 400

    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_input = event.message.text.strip()
    print(f"üì© User Input: {user_input}")

    try:
        user_data = parse_user_input(user_input)

        if not user_data:
            reply_text = "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: \nBill Length, Bill Depth, Flipper Length, Body Mass, Sex"
        else:
            response = requests.post(PREDICTION_API_URL, json=user_data)
            result = response.json()

            if "prediction" in result:
                reply_text = f"üêß ‡∏™‡∏≤‡∏¢‡∏û‡∏±‡∏ô‡∏ò‡∏∏‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {result['prediction']}"
            else:
                reply_text = f"‚ùå Error: {result['error']}"

    except Exception as e:
        reply_text = f"‚ùå Error: {str(e)}"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=reply_text))

def parse_user_input(text):
    """ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API """
    try:
        parts = text.split(",")
        if len(parts) != 5:
            return None
        
        return {
            "bill_length_mm": float(parts[0]),
            "bill_depth_mm": float(parts[1]),
            "flipper_length_mm": float(parts[2]),
            "body_mass_g": float(parts[3]),
            "sex": parts[4].strip().upper()
        }
    except:
        return None

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
